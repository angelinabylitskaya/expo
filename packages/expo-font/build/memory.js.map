{"version":3,"file":"memory.js","sourceRoot":"","sources":["../src/memory.ts"],"names":[],"mappings":"AAAA,OAAO,cAAc,MAAM,kBAAkB,CAAC;AAE9C,MAAM,CAAC,MAAM,YAAY,GAAsC,EAAE,CAAC;AAElE,8EAA8E;AAC9E,IAAI,KAAK,GAAgC,EAAE,CAAC;AAE5C,MAAM,UAAU,UAAU,CAAC,UAAkB;IAC3C,KAAK,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;AAC3B,CAAC;AAED,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,UAAkB,EAAE,EAAE;IACpD,OAAO,UAAU,IAAI,KAAK,CAAC;AAC7B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,UAAkB,EAAE,EAAE;IACnD,IAAI,eAAe,CAAC,UAAU,CAAC,EAAE;QAC/B,OAAO,IAAI,CAAC;KACb;SAAM;QACL,MAAM,iBAAiB,GAAa,cAAc,CAAC,WAAW,CAAC;QAC/D,iBAAiB,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACjC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,OAAO,UAAU,IAAI,KAAK,CAAC;KAC5B;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,UAAkB,EAAE,EAAE;IAC7D,OAAO,KAAK,CAAC,UAAU,CAAC,CAAC;AAC3B,CAAC,CAAC;AACF,MAAM,CAAC,MAAM,UAAU,GAAG,GAAG,EAAE;IAC7B,KAAK,GAAG,EAAE,CAAC;AACb,CAAC,CAAC","sourcesContent":["import ExpoFontLoader from './ExpoFontLoader';\n\nexport const loadPromises: { [name: string]: Promise<void> } = {};\n\n// cache the value on the js side for fast access to the fonts that are loaded\nlet cache: { [name: string]: boolean } = {};\n\nexport function markLoaded(fontFamily: string) {\n  cache[fontFamily] = true;\n}\n\nexport const isLoadedInCache = (fontFamily: string) => {\n  return fontFamily in cache;\n};\n\nexport const isLoadedNative = (fontFamily: string) => {\n  if (isLoadedInCache(fontFamily)) {\n    return true;\n  } else {\n    const loadedNativeFonts: string[] = ExpoFontLoader.loadedFonts;\n    loadedNativeFonts.forEach((font) => {\n      cache[font] = true;\n    });\n    return fontFamily in cache;\n  }\n};\n\nexport const purgeFontFamilyFromCache = (fontFamily: string) => {\n  delete cache[fontFamily];\n};\nexport const purgeCache = () => {\n  cache = {};\n};\n"]}